# For more information about using CMake with Android Studio, read the
# documentation: https://d.android.com/studio/projects/add-native-code.html
# Sets the minimum version of CMake required to build the native library.
cmake_minimum_required(VERSION 3.4.1)
# Creates and names a library, sets it as either STATIC
# or SHARED, and provides the relative paths to its source code.
# You can define multiple libraries, and CMake builds them for you.
# Gradle automatically packages shared libraries with your APK.
set( PROJECT_ROOT "${CMAKE_SOURCE_DIR}/../.." )
# Set C++ standard to 11
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=gnu++11")
set (CMAKE_CXX_STANDARD 11)
set(CMAKE_BUILD_TYPE src/debug)
set(THREADS_PREFER_PTHREAD_FLAG ON)
set(ARCH_DIR ${ANDROID_ARCH_NAME})
find_package(Threads REQUIRED)
add_library( # Sets the name of the library.
             native-lib

             # Sets the library as a shared library.
             SHARED
             
             # Provides a relative path to your source file(s).
             src/main/cpp/NativeHelloWorld.cpp)

# Configure import libs
set(distribution_DIR ${CMAKE_SOURCE_DIR}/../distributions)

# add the open ssl lib
#add_library(libssl STATIC IMPORTED)
#set_target_properties(libssl PROPERTIES IMPORTED_LOCATION ${distribution_DIR}/openssl/${ANDROID_ABI}/lib/libssl.a)
# Add the open ssl crypto lib
#add_library(libcrypto STATIC IMPORTED)
#set_target_properties(libcrypto PROPERTIES IMPORTED_LOCATION ${distribution_DIR}/openssl/${ANDROID_ABI}/lib/libcrypto.a)

# Add to target_include_directories
#target_include_directories(native-lib PRIVATE ${distribution_DIR}/openssl/include/)
#target_include_directories(native-lib PRIVATE ${distribution_DIR}/openssl/include/openssl/)
#
#target_include_directories(socketGenerator PRIVATE ${distribution_DIR}/openssl/include/)
#target_include_directories(socketGenerator PRIVATE ${distribution_DIR}/openssl/include/openssl/)
# Searches for a specified prebuilt library and stores the path as a
# variable. Because CMake includes system libraries in the search path by
# default, you only need to specify the name of the public NDK library
# you want to add. CMake verifies that the library exists before
# completing its build.

find_library( # Sets the name of the path variable.
              log-lib
              # Specifies the name of the NDK library that you want CMake to locate.
              log )
# Specifies libraries CMake should link to your target library. You
# can link multiple libraries, such as libraries you define in this
# build script, prebuilt third-party libraries, or system libraries.

target_link_libraries( # Specifies the target library.
                        native-lib
                        #libssl
                        #libcrypto
                        # Links the target library to the log library
                        # included in the NDK.
                        ${log-lib} )